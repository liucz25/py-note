默认情况下，cp命令不能复制目录，如果要复制目录，则必须使用-R选项；

#!/bin/bash

变量
a="dsfa"

echo ${a}


从命令行传递到脚本的参数：$0，$1，$2，$3...

$0就是脚本文件自身的名字，$1 是第一个参数，$2 是第二个参数，$3 是第三个参数，然后是第四个。$9 之后的位置参数就必须用大括号括起来了，比如，${10}，${11}，${12}。

$# ： 传递到脚本的参数个数
$* ： 以一个单字符串显示所有向脚本传递的参数。与位置变量不同,此选项参数可超过 9个
$$ ： 脚本运行的当前进程 ID号
$! ： 后台运行的最后一个进程的进程 ID号
$@ ： 与$#相同,但是使用时加引号,并在引号中返回每个参数
$： 显示shell使用的当前选项,与 set命令功能相同
$? ： 显示最后命令的退出状态。 0表示没有错误,其他任何值表明有错误。

原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。
expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
注意使用的反引号（esc键下边）
表达式和运算符之间要有空格$a + $b写成$a+$b不行
条件表达式要放在方括号之间，并且要有空格[ $a == $b ]写成[$a==$b]不行
乘号（*）前边必须加反斜杠（\)才能实现乘法运算

expr内不支持（）

关系运算符只支持数字，不支持字符串，除非字符串的值是数字。
>
<
也不能用
-eq
-ge
-le

shell中函数的定义格式如下：

[ function ] funname [()]

{

    action;

    [return int;]

}
说明：

可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)

funWithReturn
echo "The sum of the two numbers entered is $? !"

funWithReturn
echo "The sum of the two numbers entered is $? !"

$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。
